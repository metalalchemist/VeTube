import wx
from setup import player
from globals.data_store import config
from globals.mensajes import mensajes_categorias, mensajes_sonidos, eventos_lista
from controller.ajustes_controller import AjustesController
from globals.resources import idiomas_disponibles,langs,codes,monedas,lista_voces
class configuracionDialog(wx.Dialog):
	def __init__(self, parent):
		super().__init__(parent, title=_("Configuración"), style=wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER)
		main_sizer = wx.BoxSizer(wx.VERTICAL)
		self.tree_1 = wx.Treebook(self, wx.ID_ANY)
		# panel general
		self.treeItem_1 = wx.Panel(self.tree_1, wx.ID_ANY)
		self.tree_1.AddPage(self.treeItem_1, _("General"))
		panel_sizer_1 = wx.BoxSizer(wx.VERTICAL)
		box_1 = wx.StaticBox(self.treeItem_1, -1, _("Opciones de la app"))
		boxSizer_1 = wx.StaticBoxSizer(box_1, wx.VERTICAL)
		label_language = wx.StaticText(self.treeItem_1, wx.ID_ANY, _("Idioma de VeTube (Requiere reiniciar)"))
		boxSizer_1.Add(label_language, 0, wx.ALL, 5)
		self.choice_language = wx.Choice(self.treeItem_1, wx.ID_ANY, choices=langs)
		self.choice_language.SetSelection(codes.index(config['idioma']))
		boxSizer_1.Add(self.choice_language, 0, wx.EXPAND | wx.ALL, 5)
		self.check_donaciones = wx.CheckBox(self.treeItem_1, wx.ID_ANY, _("Activar diálogo de donaciones al inicio de la app."))
		self.check_donaciones.SetValue(config['donations'])
		boxSizer_1.Add(self.check_donaciones, 0, wx.ALL, 5)
		self.check_salir = wx.CheckBox(self.treeItem_1, wx.ID_ANY, _("preguntar si desea salir de la app al cerrar."))
		self.check_salir.SetValue(config['salir'])
		boxSizer_1.Add(self.check_salir, 0, wx.ALL, 5)
		self.check_actualizaciones = wx.CheckBox(self.treeItem_1, wx.ID_ANY, _("Comprobar si hay actualizaciones al iniciar la app"))
		self.check_actualizaciones.SetValue(config['updates'])
		boxSizer_1.Add(self.check_actualizaciones, 0, wx.ALL, 5)
		self.check_traduccion = wx.CheckBox(self.treeItem_1, wx.ID_ANY, _("intentar traducir las novedades cuando salga una actualización."))
		self.check_traduccion.SetValue(config['traducir'])
		boxSizer_1.Add(self.check_traduccion, 0, wx.ALL, 5)
		label_trans = wx.StaticText(self.treeItem_1, wx.ID_ANY, _("traducción de mensajes: "))
		boxSizer_1.Add(label_trans, 0, wx.ALL, 5)
		self.choice_traducir = wx.Choice(self.treeItem_1, wx.ID_ANY, choices=idiomas_disponibles)
		self.choice_traducir.SetSelection(0)
		boxSizer_1.Add(self.choice_traducir, 0, wx.EXPAND | wx.ALL, 5)
		label_monedas = wx.StaticText(self.treeItem_1, wx.ID_ANY, _("convertir las donaciones a la divisa: "))
		boxSizer_1.Add(label_monedas, 0, wx.ALL, 5)
		self.choice_moneditas = wx.Choice(self.treeItem_1, wx.ID_ANY, choices=monedas)
		self.choice_moneditas.SetSelection(0)
		boxSizer_1.Add(self.choice_moneditas, 0, wx.EXPAND | wx.ALL, 5)
		panel_sizer_1.Add(boxSizer_1, 1, wx.EXPAND | wx.ALL, 5)
		self.treeItem_1.SetSizer(panel_sizer_1)

		# panel de voz
		self.treeItem_2 = wx.Panel(self.tree_1, wx.ID_ANY)
		self.tree_1.AddPage(self.treeItem_2, _("Voz"))
		panel_sizer_2 = wx.BoxSizer(wx.VERTICAL)
		box_2 = wx.StaticBox(self.treeItem_2, -1, _("Opciones del habla"))
		boxSizer_2 = wx.StaticBoxSizer(box_2, wx.VERTICAL)
		self.check_1 = wx.CheckBox(self.treeItem_2, wx.ID_ANY, _("Usar voz sapi en lugar de lector de pantalla."))
		self.check_1.SetValue(config['sapi'])
		boxSizer_2.Add(self.check_1, 0, wx.ALL, 5)
		label_tts = wx.StaticText(self.treeItem_2, wx.ID_ANY, _("Sistema TTS a usar: "))
		boxSizer_2.Add(label_tts, 0, wx.ALL, 5)
		self.seleccionar_TTS = wx.Choice(self.treeItem_2, wx.ID_ANY, choices=["auto", "piper", "sapi5"])
		self.seleccionar_TTS.SetStringSelection(config['sistemaTTS'])
		boxSizer_2.Add(self.seleccionar_TTS, 0, wx.EXPAND | wx.ALL, 5)
		self.chk1 = wx.CheckBox(self.treeItem_2, wx.ID_ANY, _("Activar lectura de mensajes automática"))
		self.chk1.SetValue(config['reader'])
		boxSizer_2.Add(self.chk1, 0, wx.ALL, 5)
		label_6 = wx.StaticText(self.treeItem_2, wx.ID_ANY, _("Voz: "))
		boxSizer_2.Add(label_6, 0, wx.ALL, 5)
		self.choice_2 = wx.Choice(self.treeItem_2, wx.ID_ANY, choices=lista_voces)
		self.choice_2.SetSelection(config['voz'])
		boxSizer_2.Add(self.choice_2, 0, wx.EXPAND | wx.ALL, 5)
		self.instala_voces = wx.Button(self.treeItem_2, wx.ID_ANY, label=_("Instalar un paquete de voz..."))
		boxSizer_2.Add(self.instala_voces, 0, wx.ALL, 5)
		label_8 = wx.StaticText(self.treeItem_2, wx.ID_ANY, _("Tono: "))
		boxSizer_2.Add(label_8, 0, wx.ALL, 5)
		self.slider_1 = wx.Slider(self.treeItem_2, wx.ID_ANY, config['tono'] + 10, 0, 20)
		boxSizer_2.Add(self.slider_1, 0, wx.EXPAND | wx.ALL, 5)
		label_9 = wx.StaticText(self.treeItem_2, wx.ID_ANY, _("Volumen: "))
		boxSizer_2.Add(label_9, 0, wx.ALL, 5)
		self.slider_2 = wx.Slider(self.treeItem_2, wx.ID_ANY, config['volume'], 0, 100)
		boxSizer_2.Add(self.slider_2, 0, wx.EXPAND | wx.ALL, 5)
		label_10 = wx.StaticText(self.treeItem_2, wx.ID_ANY, _("Velocidad: "))
		boxSizer_2.Add(label_10, 0, wx.ALL, 5)
		self.slider_3 = wx.Slider(self.treeItem_2, wx.ID_ANY, config['speed'] + 10, 0, 20)
		boxSizer_2.Add(self.slider_3, 0, wx.EXPAND | wx.ALL, 5)
		self.boton_prueva = wx.Button(self.treeItem_2, wx.ID_ANY, label=_("&Reproducir prueba."))
		boxSizer_2.Add(self.boton_prueva, 0, wx.ALL, 5)
		panel_sizer_2.Add(boxSizer_2, 1, wx.EXPAND | wx.ALL, 5)
		self.treeItem_2.SetSizer(panel_sizer_2)

		# panel de reproducción
		self.treeItem_reproduccion = wx.Panel(self.tree_1, wx.ID_ANY)
		self.tree_1.AddPage(self.treeItem_reproduccion, _("reproducción"))
		panel_sizer_reproduccion = wx.BoxSizer(wx.VERTICAL)
		box_reproduccion = wx.StaticBox(self.treeItem_reproduccion, -1, _("ajustes de reproducción"))
		boxSizer_reproduccion = wx.StaticBoxSizer(box_reproduccion, wx.VERTICAL)
		self.check_reproducir = wx.CheckBox(self.treeItem_reproduccion, wx.ID_ANY, _("activar reproducción automática al iniciar un en vivo."))
		self.check_reproducir.SetValue(config.get('reproducir', True))
		boxSizer_reproduccion.Add(self.check_reproducir, 0, wx.ALL, 5)
		label_tiempo = wx.StaticText(self.treeItem_reproduccion, wx.ID_ANY, _("tiempo para adelantar y atrazar el en vivo en segundos"))
		boxSizer_reproduccion.Add(label_tiempo, 0, wx.ALL, 5)
		self.spin_tiempo = wx.SpinCtrl(self.treeItem_reproduccion, wx.ID_ANY, value=str(config.get('tiempo', 10)), min=1, max=60)
		boxSizer_reproduccion.Add(self.spin_tiempo, 0, wx.EXPAND | wx.ALL, 5)
		label_volumen_reproductor = wx.StaticText(self.treeItem_reproduccion, wx.ID_ANY, _("volumen del reproductor"))
		boxSizer_reproduccion.Add(label_volumen_reproductor, 0, wx.ALL, 5)
		self.slider_volumen_reproductor = wx.Slider(self.treeItem_reproduccion, wx.ID_ANY, config.get('volumen', 100), 0, 100)
		boxSizer_reproduccion.Add(self.slider_volumen_reproductor, 0, wx.EXPAND | wx.ALL, 5)
		label_cambiovolumen = wx.StaticText(self.treeItem_reproduccion, wx.ID_ANY, _("cambio de volumen con las teclas de volumen (1-25)"))
		boxSizer_reproduccion.Add(label_cambiovolumen, 0, wx.ALL, 5)
		self.slider_cambiovolumen = wx.Slider(self.treeItem_reproduccion, wx.ID_ANY, config.get('cambiovolumen', 10), 1, 25)
		boxSizer_reproduccion.Add(self.slider_cambiovolumen, 0, wx.EXPAND | wx.ALL, 5)
		panel_sizer_reproduccion.Add(boxSizer_reproduccion, 1, wx.EXPAND | wx.ALL, 5)
		self.treeItem_reproduccion.SetSizer(panel_sizer_reproduccion)

		# panel de categorías
		self.treeItem_3 = wx.Panel(self.tree_1, wx.ID_ANY)
		self.tree_1.AddPage(self.treeItem_3, _('Categorías'))
		sizer_categoriza = wx.BoxSizer(wx.VERTICAL)
		self.categoriza = wx.ListCtrl(self.treeItem_3, wx.ID_ANY, style=wx.LC_REPORT)
		self.categoriza.InsertColumn(0, _("Categoría"))
		self.categoriza.EnableCheckBoxes()
		sizer_categoriza.Add(self.categoriza, 1, wx.EXPAND | wx.ALL, 5)
		self.treeItem_3.SetSizer(sizer_categoriza)

		# panel de sonidos
		self.treeItem_4 = wx.Panel(self.tree_1, wx.ID_ANY)
		self.tree_1.AddPage(self.treeItem_4, _('Sonidos'))
		sizer_soniditos = wx.BoxSizer(wx.VERTICAL)
		self.check_2 = wx.CheckBox(self.treeItem_4, wx.ID_ANY, _("Activar sonidos"))
		self.check_2.SetValue(config['sonidos'])
		sizer_soniditos.Add(self.check_2, 0, wx.ALL, 5)
		self.soniditos = wx.ListCtrl(self.treeItem_4, wx.ID_ANY, style=wx.LC_REPORT)
		self.soniditos.InsertColumn(0, _("Sonido"))
		self.soniditos.EnableCheckBoxes()
		sizer_soniditos.Add(self.soniditos, 1, wx.EXPAND | wx.ALL, 5)
		sound_buttons_sizer = wx.BoxSizer(wx.HORIZONTAL)
		self.reproducir = wx.Button(self.treeItem_4, wx.ID_ANY, _("&Reproducir"))
		sound_buttons_sizer.Add(self.reproducir, 0, wx.ALL, 5)
		sizer_soniditos.Add(sound_buttons_sizer, 0, wx.ALL, 5)
		label_dispositivo = wx.StaticText(self.treeItem_4, wx.ID_ANY, _("Seleccionar dispositivo de audio"))
		sizer_soniditos.Add(label_dispositivo, 0, wx.ALL, 5)
		self.lista_dispositivos = wx.Choice(self.treeItem_4, wx.ID_ANY, choices=player.devicenames)
		self.lista_dispositivos.SetSelection(config['dispositivo'] - 1)
		sizer_soniditos.Add(self.lista_dispositivos, 0, wx.EXPAND | wx.ALL, 5)
		self.establecer_dispositivo = wx.Button(self.treeItem_4, wx.ID_ANY, label=_("&Establecer"))
		sizer_soniditos.Add(self.establecer_dispositivo, 0, wx.ALL, 5)
		self.treeItem_4.SetSizer(sizer_soniditos)

		# panel de eventos
		self.treeItem_5 = wx.Panel(self.tree_1, wx.ID_ANY)
		self.tree_1.AddPage(self.treeItem_5, _('Eventos'))
		sizer_eventos = wx.BoxSizer(wx.VERTICAL)
		lbl = wx.StaticText(self.treeItem_5, wx.ID_ANY, _("procesados: "))
		sizer_eventos.Add(lbl, 0, wx.ALL, 5)
		self.eventos = wx.ListCtrl(self.treeItem_5, wx.ID_ANY, style=wx.LC_REPORT)
		self.eventos.InsertColumn(0, _("Evento"))
		self.eventos.EnableCheckBoxes()
		sizer_eventos.Add(self.eventos, 1, wx.EXPAND | wx.ALL, 5)
		lbl_1 = wx.StaticText(self.treeItem_5, wx.ID_ANY, _("leídos"))
		sizer_eventos.Add(lbl_1, 0, wx.ALL, 5)
		self.unread = wx.ListCtrl(self.treeItem_5, wx.ID_ANY, style=wx.LC_REPORT)
		self.unread.InsertColumn(0, _("Evento"))
		self.unread.EnableCheckBoxes()
		sizer_eventos.Add(self.unread, 1, wx.EXPAND | wx.ALL, 5)
		self.treeItem_5.SetSizer(sizer_eventos)
		main_sizer.Add(self.tree_1, 1, wx.EXPAND | wx.ALL, 5)

		# botones de diálogo
		button_sizer = wx.BoxSizer(wx.HORIZONTAL)
		button_sizer.AddStretchSpacer()
		button_ok = wx.Button(self, wx.ID_OK, _("&Aceptar"))
		button_ok.SetDefault()
		button_cancel = wx.Button(self, wx.ID_CANCEL, _("&Cancelar"))
		button_sizer.Add(button_ok, 0, wx.ALL, 5)
		button_sizer.Add(button_cancel, 0, wx.ALL, 5)
		main_sizer.Add(button_sizer, 0, wx.EXPAND | wx.ALL, 0)
		self.SetSizer(main_sizer)
		self.SetSize((550, 600))
		self.Center()

		# Lógica y carga de datos
		if config['sapi']:
			self.seleccionar_TTS.Disable()
		else:
			self.seleccionar_TTS.Enable()
		if config['sistemaTTS'] == "piper":
			self.instala_voces.Disable()
			label_8.Disable()
			self.slider_1.Disable()
			label_9.Disable()
			self.slider_2.Disable()
		if config['sonidos']:
			self.soniditos.Enable()
			self.reproducir.Enable()
		else:
			self.soniditos.Disable()
			self.reproducir.Disable()

		# Categorías
		for contador in range(len(mensajes_categorias)):
			self.categoriza.InsertItem(contador, mensajes_categorias[contador])
			self.categoriza.CheckItem(contador, check=config['categorias'][contador])
		self.categoriza.Focus(0)

		# Sonidos
		for contador in range(len(mensajes_sonidos)):
			self.soniditos.InsertItem(contador, mensajes_sonidos[contador])
			self.soniditos.CheckItem(contador, check=config['listasonidos'][contador])
		self.soniditos.Focus(0)

		# Eventos
		for contador in range(len(config['eventos'])):
			self.eventos.InsertItem(contador, eventos_lista[contador])
			self.eventos.CheckItem(contador, check=config['eventos'][contador])
		self.eventos.Focus(0)

		# Unread
		for contador in range(len(config['unread'])):
			self.unread.InsertItem(contador, eventos_lista[contador])
			self.unread.CheckItem(contador, check=config['unread'][contador])
		self.unread.Focus(0)
		self.ajustes_controller = AjustesController(self)